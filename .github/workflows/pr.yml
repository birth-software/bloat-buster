name: CI

on:
  pull_request:

env:
  BB_CI: 1
  CLANG_PATH: clang-19
  CLANGXX_PATH: clang++-19
  LLVM_VERSION: 20.1.7
  BB_CACHE_DIR: bb-cache

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        os: [ self-hosted ]
        BIRTH_CMAKE_BUILD_TYPE: [ Release-assertions, Release ]
        BIRTH_BUILD_MODE: [ debug_none, debug, soft_optimize, optimize_for_speed, optimize_for_size, aggressively_optimize_for_speed, aggressively_optimize_for_size ]
        HAS_DEBUG_INFO: [ true, false ]
        IS_NATIVE: [ true, false ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Build and test (Packaged LLVM)
        shell: bash
        env:
          CMAKE_BUILD_TYPE: ${{matrix.BIRTH_CMAKE_BUILD_TYPE}}
          BIRTH_BUILD_MODE: ${{matrix.BIRTH_BUILD_MODE}}
          HAS_DEBUG_INFO: ${{matrix.HAS_DEBUG_INFO}}
          IS_NATIVE: ${{matrix.IS_NATIVE}}
        run: |
          set -eux
          ./generate.sh
          CMAKE_PREFIX_PATH=$HOME/dev/llvm/install/llvm_${LLVM_VERSION}_x86_64-linux-${CMAKE_BUILD_TYPE} $HOME/bloat-buster-artifacts/releases/main/compiler_generic compile src/compiler.bbb $BIRTH_BUILD_MODE $HAS_DEBUG_INFO $IS_NATIVE
          tree
          ${BB_CACHE_DIR}/${BIRTH_BUILD_MODE}_$([ "$HAS_DEBUG_INFO" == "true" ] && echo "di" || echo "nodi")_$([ "$IS_NATIVE" == "true" ] && echo "native" || echo "generic")/compiler test
